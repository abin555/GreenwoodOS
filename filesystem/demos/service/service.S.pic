	.file	"service.c"
	.intel_syntax noprefix
	.text
	.globl	serial
	.section	.bss
	.align 4
	.type	serial, @object
	.size	serial, 4
serial:
	.zero	4
	.section	.rodata
.LC0:
	.string	"Fibonacci Series: %d, %d, "
.LC1:
	.string	"%d, "
	.text
	.globl	fib
	.type	fib, @function
fib:
	push	ebp
	mov	ebp, esp
	push	ebx
	sub	esp, 20
	call	__x86.get_pc_thunk.bx
	add	ebx, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_
	mov	DWORD PTR -24[ebp], 0
	mov	DWORD PTR -16[ebp], 1
	mov	edx, DWORD PTR -24[ebp]
	mov	eax, DWORD PTR -16[ebp]
	add	eax, edx
	mov	DWORD PTR -20[ebp], eax
	mov	eax, DWORD PTR serial@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	push	DWORD PTR -16[ebp]
	push	DWORD PTR -24[ebp]
	lea	edx, .LC0@GOTOFF[ebx]
	push	edx
	push	eax
	call	fprintf@PLT
	add	esp, 16
	mov	DWORD PTR -12[ebp], 3
	jmp	.L2
.L3:
	mov	eax, DWORD PTR serial@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	sub	esp, 4
	push	DWORD PTR -20[ebp]
	lea	edx, .LC1@GOTOFF[ebx]
	push	edx
	push	eax
	call	fprintf@PLT
	add	esp, 16
	mov	eax, DWORD PTR -16[ebp]
	mov	DWORD PTR -24[ebp], eax
	mov	eax, DWORD PTR -20[ebp]
	mov	DWORD PTR -16[ebp], eax
	mov	edx, DWORD PTR -24[ebp]
	mov	eax, DWORD PTR -16[ebp]
	add	eax, edx
	mov	DWORD PTR -20[ebp], eax
	inc	DWORD PTR -12[ebp]
.L2:
	mov	eax, DWORD PTR -12[ebp]
	cmp	eax, DWORD PTR 8[ebp]
	jle	.L3
	mov	eax, DWORD PTR serial@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	sub	esp, 8
	push	eax
	push	10
	call	fputc@PLT
	add	esp, 16
	nop
	mov	ebx, DWORD PTR -4[ebp]
	leave
	ret
	.size	fib, .-fib
	.globl	service_file_buf
	.section	.bss
	.align 4
	.type	service_file_buf, @object
	.size	service_file_buf, 4
service_file_buf:
	.zero	4
	.globl	num_reads
	.align 4
	.type	num_reads, @object
	.size	num_reads, 4
num_reads:
	.zero	4
	.globl	was_read
	.align 4
	.type	was_read, @object
	.size	was_read, 4
was_read:
	.zero	4
	.text
	.globl	read_notification
	.type	read_notification, @function
read_notification:
	push	ebp
	mov	ebp, esp
	call	__x86.get_pc_thunk.ax
	add	eax, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_
	mov	eax, DWORD PTR was_read@GOT[eax]
	mov	DWORD PTR [eax], 1
	nop
	pop	ebp
	ret
	.size	read_notification, .-read_notification
	.section	.rodata
	.align 4
.LC2:
	.string	"Hello from Service! Fib is at 0x%x\n"
.LC3:
	.string	"w"
.LC4:
	.string	"/-/dev/serial"
.LC5:
	.string	"r"
.LC6:
	.string	"/-/fsCTRL"
.LC7:
	.string	"Cannot open file!"
.LC8:
	.string	"Read %d times!"
.LC9:
	.string	"file"
.LC10:
	.string	"Serv"
.LC11:
	.string	"was_read @ 0x%x\n"
.LC12:
	.string	"[SERVICE] READ!\n"
	.text
	.globl	main
	.type	main, @function
main:
	lea	ecx, 4[esp]
	and	esp, -16
	push	DWORD PTR -4[ecx]
	push	ebp
	mov	ebp, esp
	push	ebx
	push	ecx
	sub	esp, 48
	call	__x86.get_pc_thunk.bx
	add	ebx, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_
	sub	esp, 8
	mov	eax, DWORD PTR fib@GOT[ebx]
	push	eax
	lea	eax, .LC2@GOTOFF[ebx]
	push	eax
	call	printf@PLT
	add	esp, 16
	sub	esp, 8
	lea	eax, .LC3@GOTOFF[ebx]
	push	eax
	lea	eax, .LC4@GOTOFF[ebx]
	push	eax
	call	fopen@PLT
	add	esp, 16
	mov	edx, DWORD PTR serial@GOT[ebx]
	mov	DWORD PTR [edx], eax
	sub	esp, 12
	push	10
	call	fib@PLT
	add	esp, 16
	sub	esp, 8
	lea	eax, .LC5@GOTOFF[ebx]
	push	eax
	lea	eax, .LC6@GOTOFF[ebx]
	push	eax
	call	fopen@PLT
	add	esp, 16
	mov	DWORD PTR -12[ebp], eax
	cmp	DWORD PTR -12[ebp], 0
	jne	.L6
	sub	esp, 12
	lea	eax, .LC7@GOTOFF[ebx]
	push	eax
	call	puts@PLT
	add	esp, 16
	mov	eax, 1
	jmp	.L10
.L6:
	push	DWORD PTR -12[ebp]
	push	1
	push	24
	lea	eax, -48[ebp]
	push	eax
	call	fread@PLT
	add	esp, 16
	sub	esp, 12
	push	DWORD PTR -12[ebp]
	call	fclose@PLT
	add	esp, 16
	sub	esp, 12
	push	1000
	call	malloc@PLT
	add	esp, 16
	mov	edx, eax
	mov	eax, DWORD PTR service_file_buf@GOT[ebx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR num_reads@GOT[ebx]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR was_read@GOT[ebx]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR service_file_buf@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	sub	esp, 4
	push	1000
	push	0
	push	eax
	call	memset@PLT
	add	esp, 16
	mov	eax, DWORD PTR num_reads@GOT[ebx]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR service_file_buf@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	push	edx
	lea	edx, .LC8@GOTOFF[ebx]
	push	edx
	push	1000
	push	eax
	call	snprintf@PLT
	add	esp, 16
	mov	eax, DWORD PTR -40[ebp]
	mov	edx, DWORD PTR service_file_buf@GOT[ebx]
	mov	edx, DWORD PTR [edx]
	sub	esp, 4
	push	2
	push	1000
	push	edx
	call	eax
	add	esp, 16
	mov	DWORD PTR -16[ebp], eax
	mov	eax, DWORD PTR -32[ebp]
	sub	esp, 12
	push	0
	push	0
	mov	edx, DWORD PTR read_notification@GOT[ebx]
	push	edx
	push	0
	push	DWORD PTR -16[ebp]
	call	eax
	add	esp, 32
	mov	eax, DWORD PTR -44[ebp]
	sub	esp, 8
	push	DWORD PTR -16[ebp]
	lea	edx, .LC9@GOTOFF[ebx]
	push	edx
	call	eax
	add	esp, 16
	mov	DWORD PTR -20[ebp], eax
	mov	eax, DWORD PTR -48[ebp]
	sub	esp, 12
	lea	edx, .LC10@GOTOFF[ebx]
	push	edx
	call	eax
	add	esp, 16
	mov	DWORD PTR -24[ebp], eax
	mov	eax, DWORD PTR -36[ebp]
	mov	edx, DWORD PTR -28[ebp]
	sub	esp, 8
	push	DWORD PTR -24[ebp]
	push	edx
	call	eax
	add	esp, 16
	mov	eax, DWORD PTR -36[ebp]
	sub	esp, 8
	push	DWORD PTR -20[ebp]
	push	DWORD PTR -24[ebp]
	call	eax
	add	esp, 16
	sub	esp, 8
	mov	eax, DWORD PTR was_read@GOT[ebx]
	push	eax
	lea	eax, .LC11@GOTOFF[ebx]
	push	eax
	call	printf@PLT
	add	esp, 16
.L9:
	mov	eax, DWORD PTR was_read@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	.L8
	mov	eax, DWORD PTR was_read@GOT[ebx]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR serial@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	push	eax
	push	16
	push	1
	lea	eax, .LC12@GOTOFF[ebx]
	push	eax
	call	fwrite@PLT
	add	esp, 16
	mov	eax, DWORD PTR service_file_buf@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	sub	esp, 4
	push	1000
	push	0
	push	eax
	call	memset@PLT
	add	esp, 16
	mov	eax, DWORD PTR num_reads@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	lea	edx, 1[eax]
	mov	eax, DWORD PTR num_reads@GOT[ebx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR num_reads@GOT[ebx]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR service_file_buf@GOT[ebx]
	mov	eax, DWORD PTR [eax]
	push	edx
	lea	edx, .LC8@GOTOFF[ebx]
	push	edx
	push	1000
	push	eax
	call	snprintf@PLT
	add	esp, 16
.L8:
	call	yield@PLT
	jmp	.L9
.L10:
	lea	esp, -8[ebp]
	pop	ecx
	pop	ebx
	pop	ebp
	lea	esp, -4[ecx]
	ret
	.size	main, .-main
	.section	.text.__x86.get_pc_thunk.ax,"axG",@progbits,__x86.get_pc_thunk.ax,comdat
	.globl	__x86.get_pc_thunk.ax
	.hidden	__x86.get_pc_thunk.ax
	.type	__x86.get_pc_thunk.ax, @function
__x86.get_pc_thunk.ax:
	mov	eax, DWORD PTR [esp]
	ret
	.section	.text.__x86.get_pc_thunk.bx,"axG",@progbits,__x86.get_pc_thunk.bx,comdat
	.globl	__x86.get_pc_thunk.bx
	.hidden	__x86.get_pc_thunk.bx
	.type	__x86.get_pc_thunk.bx, @function
__x86.get_pc_thunk.bx:
	mov	ebx, DWORD PTR [esp]
	ret
	.ident	"GCC: (GNU) 14.2.0"
