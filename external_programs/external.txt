
external:     file format elf32-i386


Disassembly of section .text:

00000000 <main>:
   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
   4:	83 e4 f0             	and    $0xfffffff0,%esp
   7:	ff 71 fc             	pushl  -0x4(%ecx)
   a:	55                   	push   %ebp
   b:	89 e5                	mov    %esp,%ebp
   d:	53                   	push   %ebx
   e:	51                   	push   %ecx
   f:	e8 87 00 00 00       	call   9b <__x86.get_pc_thunk.bx>
  14:	81 c3 b8 00 00 00    	add    $0xb8,%ebx
  1a:	83 ec 0c             	sub    $0xc,%esp
  1d:	6a 05                	push   $0x5
  1f:	e8 24 00 00 00       	call   48 <test>
  24:	83 c4 10             	add    $0x10,%esp
  27:	83 ec 0c             	sub    $0xc,%esp
  2a:	8d 83 bc ff ff ff    	lea    -0x44(%ebx),%eax
  30:	50                   	push   %eax
  31:	e8 34 00 00 00       	call   6a <print>
  36:	83 c4 10             	add    $0x10,%esp
  39:	b8 02 00 00 00       	mov    $0x2,%eax
  3e:	8d 65 f8             	lea    -0x8(%ebp),%esp
  41:	59                   	pop    %ecx
  42:	5b                   	pop    %ebx
  43:	5d                   	pop    %ebp
  44:	8d 61 fc             	lea    -0x4(%ecx),%esp
  47:	c3                   	ret    

00000048 <test>:
  48:	55                   	push   %ebp
  49:	89 e5                	mov    %esp,%ebp
  4b:	83 ec 10             	sub    $0x10,%esp
  4e:	e8 44 00 00 00       	call   97 <__x86.get_pc_thunk.ax>
  53:	05 79 00 00 00       	add    $0x79,%eax
  58:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
  5f:	8b 45 08             	mov    0x8(%ebp),%eax
  62:	01 45 fc             	add    %eax,-0x4(%ebp)
  65:	8b 45 fc             	mov    -0x4(%ebp),%eax
  68:	c9                   	leave  
  69:	c3                   	ret    

0000006a <print>:
  6a:	55                   	push   %ebp
  6b:	89 e5                	mov    %esp,%ebp
  6d:	53                   	push   %ebx
  6e:	e8 24 00 00 00       	call   97 <__x86.get_pc_thunk.ax>
  73:	05 59 00 00 00       	add    $0x59,%eax
  78:	b8 01 00 00 00       	mov    $0x1,%eax
  7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80:	cd 80                	int    $0x80
  82:	90                   	nop
  83:	5b                   	pop    %ebx
  84:	5d                   	pop    %ebp
  85:	c3                   	ret    
  86:	66 90                	xchg   %ax,%ax

00000088 <string>:
  88:	54 65 73 74 20 53 74 72 69 6e 67 21 0a 00 00        Test String!...

00000097 <__x86.get_pc_thunk.ax>:
  97:	8b 04 24             	mov    (%esp),%eax
  9a:	c3                   	ret    

0000009b <__x86.get_pc_thunk.bx>:
  9b:	8b 1c 24             	mov    (%esp),%ebx
  9e:	c3                   	ret    
  9f:	47                   	inc    %edi
  a0:	43                   	inc    %ebx
  a1:	43                   	inc    %ebx
  a2:	3a 20                	cmp    (%eax),%ah
  a4:	28 55 62             	sub    %dl,0x62(%ebp)
  a7:	75 6e                	jne    117 <_GLOBAL_OFFSET_TABLE_+0x4b>
  a9:	74 75                	je     120 <_GLOBAL_OFFSET_TABLE_+0x54>
  ab:	20 39                	and    %bh,(%ecx)
  ad:	2e 34 2e             	cs xor $0x2e,%al
  b0:	30 2d 31 75 62 75    	xor    %ch,0x75627531
  b6:	6e                   	outsb  %ds:(%esi),(%dx)
  b7:	74 75                	je     12e <_GLOBAL_OFFSET_TABLE_+0x62>
  b9:	31 7e 32             	xor    %edi,0x32(%esi)
  bc:	30 2e                	xor    %ch,(%esi)
  be:	30 34 2e             	xor    %dh,(%esi,%ebp,1)
  c1:	31 29                	xor    %ebp,(%ecx)
  c3:	20 39                	and    %bh,(%ecx)
  c5:	2e 34 2e             	cs xor $0x2e,%al
  c8:	30 00                	xor    %al,(%eax)
  ca:	66 90                	xchg   %ax,%ax

000000cc <_GLOBAL_OFFSET_TABLE_>:
	...
